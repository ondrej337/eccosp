# The commented parameters have default values but these defaults can be overridden when enabled

# config for ecp-broker
ecp-broker: # type of ECP component. Can be ecp-endpoint, ecp-directory, ecp-broker
  enabled: true # boolean flag which defines whether the component will be deployed or not
  instance: # array of ECP broker instances - one values file can hold multiple instances
    - name: br # name of kubernetes instance
      image: # section for information about Docker image
        name: entsoe/ecp-broker # URL to docker image.
        tag: 4.12.0 # Docker image tag - version or 'latest'
#        pullPolicy: IfNotPresent # Pull policy specifies when the image should be pulled, it is possible to use 'Always' so on every pod (re)start is pulled
      replicaCount: 1 # number of replicas - ECP cluster
      resourcesK8s: # section for CPU and memory specification
        requests: # minimum guaranteed amount of a resource that is reserved for a container
          cpu: 500m # minimum CPU - one CPU = 1000m or 1
          memory: 1Gi # minimum memory for container - 1Gi is equal to 1024 Mi
        limits: # maximum amount of a resource to be used by a container. Should be always higher than application can allocate (xmx)
          cpu: 1000m # maximum CPU
          memory: 5Gi # maximum memory for container - 5Gi is equal to 5120 Mi

      storageData: 1Gi # embedded database and certificates # storage for embedded database and certificates. If external DB is used, the value can be lower
      storageLogs: 256Mi # logs # storage for logs
      sharedStorageSize: 100Mi # if SharedStorage for brokers is used, this amount of storage will be requested
      sharedStorageClass: nfs-client # if SharedStorage for brokers is used, this storage class will be used to allocate shared storage resources
      #sharedStorageAccessMode: ReadWriteMany # sharedStorageAccessMode class
      #storageLogsSize: 64Mi # size of logs storage
      keepLogsAfterRestart: false # boolean flag - indicates if ECP logs are persisted after pod restart, default value false
      livenessProbe: false # automatic restart if pod is not in health state, default value false
      readinessProbe: true # ECP pod will not started before readiness probe is fulfilled - check of availability of external DB
      useSharedStorageForConfiguration: false # if enabled, all replicas of this pod will use shared storage for configs and certificates

      service: # section for definition of services exposed within kubernetes environment
        type: LoadBalancer # Default service type is LoadBalancer
#        http: # protocol used for accessing GUI - can be http or https
#          port: 8162 # port used for exposing HTTP(S) service
        https: # protocol used for accessing GUI - can be http or https
          port: 8161 # port used for exposing HTTP(S) service
        amqps: # protocol used for connection on AMQP interface of ECP Broker - can be AMQP or AMQPS
          port: 5671 # port used for exposing AMQP(S) service
      ingress: # an object that allows access to Kubernetes services from outside the Kubernetes cluster.
        enabled: false # boolean flag for enable/disable ingress, default value false
#        apiVersion: networking.k8s.io/v1 # Specifies the api version of ingress resource
#        contextPath: / # context path for ingress, default value '/'
#        host: ecp-broker.br.eccosp # URL on which the ECP Endpoint is exposed. Address needs to be aligned with hosting.
#        tls: # section for TLS definition for HTTPS connection to ingress
#          secretName: tls-secret  # secret where TLS certificate is stored
#        annotations: # ingress annotations section
#          kubernetes.io/ingress.class: nginx # ingress annotations - use nginx
#          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS" # important for remote host tunelling
#          nginx.ingress.kubernetes.io/ssl-passthrough: 'true' # important for remote host tunelling

      # The naming convention for configuration files name and parameters is camelCase instead of 'dot case format'.
      # Mapping of Helm values to ECP Broker configuration file is available in config map ./ecp-broker/templates/configMap.yaml
      brokerProperties: # stands for broker.properties file
        ecpBrokerContactPerson: Johnny Doe # ecp.broker.contactPerson
        ecpBrokerContactEmail: johnny@email.com # ecp.broker.contactEmail
        ecpBrokerContactPhone: "001111111111111" # ecp.broker.contactPhone
        ecpBrokerOrganization: Doe Company # ecp.broker.organization
        ecpBrokerUrls: amqps://eccosp-ecp-broker-br-svc:5671 # ecp.broker.urls
        ecpBrokerNetworks: DefaultNetwork # ecp.broker.networks
        # fill in value from broker.properties after registration is done
        ecpBrokerregistrationDirectoryId: # ecp.broker.registrationDirectoryId
        ecpBrokerCode: ecp-broker # ecp.broker.code

        ecpBrokerFilterComponents: '*' # ecp.broker.filter.components
        ecpBrokerFilterTypes: '*' # ecp.broker.filter.types

        ecpKeystoreLocation: /opt/ecp-broker/config/keystore.jks # ecp.keystore.location
        ecpKeystorePassword: password # ecp.keystore.password

        ecpAuthKeystoreLocation: /opt/ecp-broker/config/authKeystore.jks # ecp.authKeystore.location
        ecpAuthKeystorePassword: password # ecp.authKeystore.password

        ecpDirectoryClientSynchronizationHomeComponentDirectoryPrimaryCode: ecp-directory # ecp.directory.client.synchronization.homeComponentDirectoryPrimaryCode
        ecpDirectoryClientSynchronizationHomeComponentDirectoryPrimaryUrl: https://eccosp-ecp-directory-cd-svc:8443/ECP_MODULE # ecp.directory.client.synchronization.homeComponentDirectoryPrimaryUrl

#        ecpNatEnabled: false # NAT is disabled by default - equals to  ecp.natEnabled
#        ecpNatTable: # additional parameter for NAT array. Array values are divided by ' - '
#          - network: internet # ecp.natTable[0].network
#            sourceIp: 1.2.3.4 # ecp.natTable[0].sourceIp
#            sourcePort: 8443 # ecp.natTable[0].sourcePort
#            destinationIp: 5.6.7.8 # ecp.natTable[0].destinationIp
#            destinationPort: 8443 # ecp.natTable[0].destinationPort
#          - network: ATOM # ecp.natTable[1].network
#            sourceIp: 1.1.1.1 # ecp.natTable[1].sourceIp
#            sourcePort: 5671 # ecp.natTable[1].sourcePort
#            destinationIp: 2.2.2.2 # ecp.natTable[1].destinationIp
#            destinationPort: 5671 # ecp.natTable[1].destinationPort

#        ecpSecurityProxyEnabled: false # ecp.security.proxy.enabled
#        ecpSecurityProxyHost: socks-host # ecp.security.proxy.host
#        ecpSecurityProxyProxyPort: 1081 # ecp.security.proxy.port
#        ecpSecurityProxyNonProxyHosts: 127.0.0.1,0.0.0.0 # ecp.security.proxy.nonProxyHosts
#        ecpSecurityProxyUsername: sockssuser # ecp.security.proxy.username
#        ecpSecurityProxyPassword: sockspassword # ecp.security.proxy.password
#        ecpDirectoryClientSynchronizationDirectorySynchronizationInterval: "0 */6 * * * *" ecp.directory.client.synchronization.directorySynchronizationInterval

        # Uncomment desired DB configuration section if external DB is used. Change value of parameters as needed.

        # ----- mysql -----
#        springProfilesActive: ecp-ha # high-availibility profile of the application - configuration of external database
#        ecpDBUsername: br  # username of the user of the external database
#        ecpDBPassword: password # password of the user of the external database
#        ecpDBHostname: 1.2.3.4 # Required for readiness check, server hostname or IP
#        ecpDBName: br # Required for readiness check, external database name

#        brokerStoreJdbcUrl: jdbc:mariadb://1.2.3.4:3306/br?characterEncoding=UTF-8&useSSL=false&autoReconnect=true # broker.store.jdbc.url connection string for the external database of internal broker
#        brokerStoreJdbcUser: br # broker.store.jdbc.user
#        brokerStoreJdbcPassword: password # broker.store.jdbc.password
#        springDatasourceDriverClassName: org.mariadb.jdbc.Driver # DB driverClassName
        
        # ----- mssql -----
#        springProfilesActive: ecp-ha
#        ecpDBUsername: br
#        ecpDBPassword: password
#        ecpDBHostname: 1.2.3.4 # Required for readiness check
#        ecpDBName: br # Required for readiness check
        
#        brokerStoreJdbcUrl: jdbc:sqlserver://1.2.3.4:1433;databaseName=br;encrypt=true;trustServerCertificate=true;
#        brokerStoreJdbcUser: br
#        brokerStoreJdbcPassword: password
#        springDatasourceDriverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver
        
        # ----- postgres -----
#        springProfilesActive: ecp-ha
#        ecpDBUsername: br
#        ecpDBPassword: password
#        ecpDBHostname: 1.2.3.4 # Required for readiness check
#        ecpDBName: br # Required for readiness check

#        brokerStoreJdbcUrl: jdbc:postgresql://1.2.3.4:5432/br
#        brokerStoreJdbcUser: br
#        brokerStoreJdbcPassword: password
#        springDatasourceDriverClassName: org.postgresql.Driver
        
        # ----- oracle -----
#        springProfilesActive: ecp-ha
#        ecpDBUsername: br
#        ecpDBPassword: password
#        ecpDBHostname: 1.2.3.4 # Required for readiness check
#        ecpDBName: br # Required for readiness check
        
#        brokerStoreJdbcUrl: jdbc:oracle:thin:@1.2.3.4:1521/my_namespace
#        brokerStoreJdbcUser: br
#        brokerStoreJdbcPassword: password
#        springDatasourceDriverClassName: oracle.jdbc.OracleDriver

      env:  # stands for env file
#        heapDumpPath: # path to java heap dump file
        resourcesJvm: # memory allocation for ECP component
          xms: 128M # lower bound of java heap memory size
          xmx: 4G # upper bound of java heap memory size

      jettyRealmProperties: # jetty-realm.properties
        - login: admin # userneme for ActiveMQ console
          password: password # password for ActiveMQ console

#      jmxRemoteProperties: # jmxremote.properties
#        comSunManagementJmxRemote: true # com.sun.management.jmxremote
#        comSunManagementJmxRemotePort: 2099 # com.sun.management.jmxremote.port
#        comSunManagementJmxRemoteRmiPort: 2098 # com.sun.management.jmxremote.rmi.port
#        comSunManagementJmxRemotePasswordFile: /opt/ecp-broker/config/jmxremote.password # com.sun.management.jmxremote.password.file
#        comSunManagementJmxRemoteAccessFile: /opt/ecp-broker/config/jmxremote.access
#        comSunManagementJmxRemoteSsl: true # com.sun.management.jmxremote.ssl
#        comSunManagementJmxRegistrySsl: true # com.sun.management.jmxremote.registry.ssl # com.sun.management.jmxremote.registry.ssl
#        comSunManagementJmxRemoteSslConfigFile: /etc/ecp-directory/jmxremote.ssl # com.sun.management.jmxremote.ssl.config.file
#        comSunManagementJmxRemoteAuthenticate: true

#      jmxRemotePassword: # jmxremote.password
#        jmxRemoteUsers: # array of JMX users
#          - login: jmxuser # login for the first JMX user
#            password: jmxpassword # password for the first JMX user
#            access: readonly # access role for the first JMX user
#          - login: jmxadmin # login for second JMX user
#            password: jmxadminpassword # password for second JMX user
#            access: readwrite # access role for the second JMX user

#      jmxRemoteSsl: # jmxremote.ssl
#        javaxNetSslKeystore: /path/to/keystore.jks # javax.net.ssl.keyStore
#        javaxNetSslKeystorePassword: keystore_password # javax.net.ssl.keyStorePassword
#        javaxNetSslTrustStore: /path/to/truststore.jks # javax.net.ssl.trustStore
#        javaxNetSslTrustStorePassword: truststore_password # javax.net.ssl.trustStorePassword

#      volumeMounts:  # volume mounts - can be used for mapping config files or storages
#        - name: config  # name of volume mounts for config
#          subPath: ecp-config.xml  # name of configuration file
#          mountPath: /opt/ecp-broker/activemq/conf/ecp-config.xml # path where config file will be mounted

#      configMap: # config maps array
#        - subPath: ecp-config.xml # name of config file/volume mount
#          content: |- # content is shifted by two spaces
#            <beans xmlns="http://www.springframework.org/schema/beans"
#                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
#                   xmlns:context="http://www.springframework.org/schema/context"
#                   xmlns:task="http://www.springframework.org/schema/task"
#                   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
#                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">
#
#                <context:annotation-config />
#
#                <!-- TODO revision -->
#                <task:annotation-driven scheduler="jobScheduler"/>
#                <task:scheduler id="jobScheduler" pool-size="1"/>
#
#                <bean id="properties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
#                    <property name="location" value="file:/opt/ecp-broker/config/broker.properties"/>
#                </bean>
#
#                <!-- When more property sources is used in connection with default value,
#                it can lead to issue that the filled value is not used (if property file without value is used first)
#                - see https://jira.spring.io/browse/SPR-9989 -->
#                <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
#                    <property name="properties" ref="properties" />
#                    <property name="ignoreUnresolvablePlaceholders" value="true"/>
#                    <property name="order" value="1" />
#                    <property name="trimValues" value="true"/>
#                </bean>
#
#                <bean id="conversionService"
#                      class="org.springframework.context.support.ConversionServiceFactoryBean">
#                    <property name="converters">
#                        <list>
#                            <ref bean="natTableConverter" />
#                        </list>
#                    </property>
#                </bean>
#
#                <bean id="natTableConverter"
#                      class="eu.entsoe.ecp.directory.synchronization.NatTableConverter">
#                </bean>
#
#                <!-- ECP component cache -->
#                <bean id="componentDirectoryCache" class="eu.entsoe.ecp.directory.cache.EcpComponentCacheBean"/>
#
#                <bean id="fileBasedComponentDirectoryStorage" class="eu.entsoe.ecp.directory.storage.FileBasedComponentDirectoryStorage">
#                    <constructor-arg ref="directoryClientSpringConfiguration"/>
#                </bean>
#
#                <bean id="directoryRepositoryBean" class="eu.entsoe.ecp.directory.repository.ComponentDirectoryRepositoryInitBean" scope="prototype">
#                    <constructor-arg name="cacheBean">
#                        <ref bean="componentDirectoryCache"></ref>
#                    </constructor-arg>
#                    <property name="componentDirectoryStorage" ref="fileBasedComponentDirectoryStorage"/>
#                </bean>
#
#                <!--Registration of component directory to JAAS EcpCertificateLoginModule-->
#                <bean id="registerComponentDirectory"
#                      class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
#                    <property name="staticMethod"><value>eu.entsoe.ecp.activemq.plugin.auth.EcpCertificateLoginModule.CertificateSingletonHolder.setComponentDirectory</value></property>
#                    <property name="arguments">
#                        <list>
#                            <ref bean="componentDirectoryBean"/>
#                        </list>
#                    </property>
#                </bean>
#
#                <!-- Local Component Directory backed by component cache -->
#                <bean id="componentDirectoryBean" class="eu.entsoe.ecp.directory.service.ComponentDirectoryBean">
#                    <property name="componentComponentDirectoryCache" ref="componentDirectoryCache"/>
#                </bean>
#
#                <bean id="restTemplate" class="org.springframework.web.client.RestTemplate"></bean>
#
#                <bean class="eu.entsoe.ecp.security.keystore.KeystoreConfiguration">
#                    <property name="location" value="${ecp.keystore.location}"/>
#                    <property name="password" value="${ecp.keystore.password}"/>
#                    <property name="authAlias" value="${ecp.keystore.alias}"/>
#                </bean>
#
#                <bean class="eu.entsoe.ecp.security.keystore.AuthKeystoreConfiguration">
#                    <property name="location" value="${ecp.authKeystore.location}"/>
#                    <property name="password" value="${ecp.authKeystore.password}"/>
#                    <property name="authAlias" value="${ecp.authKeystore.alias}"/>
#                </bean>
#
#                <bean id="hsmConfig" class="eu.entsoe.ecp.security.HsmConfig"/>
#
#                <bean id="sslRestConfig" class="eu.entsoe.ecp.rest.security.template.ssl.SSLRestTemplateConfiguration"/>
#
#                <bean id="provider" factory-method="hsmProvider" factory-bean="hsmConfig">
#                    <constructor-arg ref="hsmConfiguration"/>
#                </bean>
#
#                <bean id="hsmUtils" class="eu.entsoe.ecp.security.keystore.HsmUtils">
#                    <property name="provider" ref="provider"/>
#                </bean>
#
#                <bean id="keystore" factory-method="localKeyStore" factory-bean="hsmConfig">
#                    <constructor-arg ref="hsmConfiguration"/>
#                </bean>
#
#                <bean id="sslRestTemplateFactory" factory-method="sslRestTemplateFactory" factory-bean="sslRestConfig">
#                    <constructor-arg ref="hsmConfiguration"/>
#                </bean>
#
#                <bean id="proxyConfig" class="eu.entsoe.ecp.security.proxy.SocksProxyConfiguration" >
#                    <property name="enabled" value="${ecp.security.proxy.enabled:false}"/>
#                    <property name="host" value="${ecp.security.proxy.host}"/>
#                    <property name="port" value="${ecp.security.proxy.port:1080}"/>
#                    <property name="nonProxyHosts" value="${ecp.security.proxy.nonProxyHosts}"/>
#                    <property name="username" value="${ecp.security.proxy.username}"/>
#                    <property name="password" value="${ecp.security.proxy.password}"/>
#                </bean>
#
#                <bean id="hsmConfiguration" class="eu.entsoe.ecp.security.keystore.HsmConfiguration">
#                    <property name="enabled" value="${ecp.hsm.enabled:false}"/>
#                    <property name="configPath" value="${ecp.hsm.configPath:}"/>
#                    <property name="libraryPath" value="${ecp.hsm.libraryPath}"/>
#                    <property name="slot" value="${ecp.hsm.slot:0}"/>
#                    <property name="pin" value="${ecp.hsm.pin}"/>
#                    <property name="keyPassword" value="${ecp.hsm.keyPassword}"/>
#                </bean>
#
#                <bean id="directoryClientSpringConfiguration" class="eu.entsoe.ecp.directory.DirectoryClientSpringConfiguration">
#                    <property name="root" value="${ecp.directory.client.root}"/>
#                </bean>
#
#
#                <bean id="directoryClientSyncConfiguration" class="eu.entsoe.ecp.directory.DirectoryClientSynchronizationConfiguration">
#                    <property name="homeComponentDirectoryPrimaryCode" value="${ecp.directory.client.synchronization.homeComponentDirectoryPrimaryCode}"/>
#                    <property name="homeComponentDirectoryPrimaryUrl" value="${ecp.directory.client.synchronization.homeComponentDirectoryPrimaryUrl}"/>
#                    <property name="homeComponentDirectoryBackupCode" value="${ecp.directory.client.synchronization.homeComponentDirectoryBackupCode}"/>
#                    <property name="directorySynchronizationInterval" value="${ecp.directory.client.synchronization.directorySynchronizationInterval:0 */5 * * * *}"/>
#                </bean>
#
#                <bean id="certificatesCleaningJobConfiguration" class="eu.entsoe.ecp.security.cert.CertificatesCleaningJobConfiguration">
#                    <property name="enabled" value="${ecp.certificatesCleaning.enabled:false}"/>
#                    <property name="offset" value="${ecp.certificatesCleaning.offset:0}"/>
#                </bean>
#
#                <bean id="directorySynchronizationService" class="eu.entsoe.ecp.directory.service.DirectorySynchronizationServiceImpl">
#                </bean>
#
#                <!-- Component directory synchronization job -->
#                <bean id="directorySyncJob" class="eu.entsoe.ecp.directory.synchronization.BrokerDirectoryClientSyncJob">
#                    <property name="componentDirectory" ref="componentDirectoryBean"/>
#                    <property name="wsClient" ref="directoryComponentsWsClient" />
#                    <property name="directoryClientSynchronizationConfiguration" ref="directoryClientSyncConfiguration" />
#                    <property name="directorySynchronizationService" ref="directorySynchronizationService" />
#                    <property name="componentDirectoryStorage" ref="fileBasedComponentDirectoryStorage" />
#                    <property name="componentDirectoryCache" ref="componentDirectoryCache" />
#                    <property name="brokerCode" value="${ecp.broker.code}"/>
#                    <property name="natEnabled" value="${ecp.natEnabled:false}"/>
#                    <!-- Properties of NAT table are parsed in NatTableConverter -->
#                    <property name="natTable" value="" />
#                    <property name="statisticsSynchronizationClient" ref="statisticsSynchronizationClient" />
#                    <property name="certificateSynchronizationService" ref="certificateSynchronizationService"/>
#                </bean>
#
#                <bean id="certificateSynchronizationService" class="eu.entsoe.ecp.directory.service.CertificateSynchronizationServiceImpl">
#                    <property name="localKeyStore" ref="keystore"/>
#                </bean>
#
#                <bean id="statisticsSynchronizationClient" class="eu.entsoe.ecp.directory.monitoring.StatisticsSynchronizationClient">
#                    <property name="factory" ref="sslRestTemplateFactory" />
#                    <property name="componentDirectory" ref="componentDirectoryBean"/>
#                    <property name="directoryClientSynchronizationConfiguration" ref="directoryClientSyncConfiguration"/>
#                </bean>
#
#                <bean id="certificatesCleaningJob" class="eu.entsoe.ecp.security.cert.ExpiredCertificatesCleaningJob">
#                    <property name="jobConfiguration" ref="certificatesCleaningJobConfiguration"/>
#                    <property name="localKeyStore" ref="keystore"/>
#                </bean>
#
#                <task:scheduled-tasks scheduler="jobScheduler">
#                    <task:scheduled ref="directorySyncJob" method="syncRemoteComponentDirectory" cron="${ecp.directory.client.synchronization.directorySynchronizationInterval:0 */5 * * * *}"/>
#                    <task:scheduled ref="certificatesCleaningJob" method="removeExpiredCertificates" cron="${ecp.certificatesCleaning.interval:0 10 9 * * *}"/>
#                </task:scheduled-tasks>
#
#                <bean id="directoryComponentsWsClient" class="eu.entsoe.ecp.directory.push.wsclient.DirectoryComponentServiceClient">
#                    <property name="factory" ref="sslRestTemplateFactory" />
#                </bean>
#
#                <!-- Initialize cache from CD storage before first use -->
#                <bean class="eu.entsoe.ecp.directory.cache.CacheInitializingBean" init-method="initCache">
#                    <property name="componentDirectoryCache" ref="componentDirectoryCache"/>
#                    <property name="componentDirectoryStorage" ref="fileBasedComponentDirectoryStorage"/>
#                </bean>
#
#                <bean id="mBeanExporter" class="org.springframework.jmx.export.MBeanExporter" lazy-init="false">
#                    <property name="assembler" ref="assembler"/>
#                    <property name="namingStrategy" ref="namingStrategy"/>
#                    <property name="autodetect" value="true"/>
#                    <property name="beans">
#                        <map>
#                            <entry key="Broker monitoring:name=Broker metrics" value-ref="brokerMetricsService"/>
#                        </map>
#                    </property>
#                </bean>
#
#                <bean id="jmxAttributeSource"
#                      class="org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource"/>
#
#                <bean id="assembler"
#                      class="org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler">
#                    <property name="attributeSource" ref="jmxAttributeSource"/>
#                </bean>
#
#                <bean id="namingStrategy"
#                      class="org.springframework.jmx.export.naming.MetadataNamingStrategy">
#                    <property name="attributeSource" ref="jmxAttributeSource"/>
#                </bean>
#
#                <bean id="localKeyStoreUtils" class="eu.entsoe.ecp.common.rest.service.LocalKeyStoreUtils">
#                    <property name="localKeyStore" ref="keystore"/>
#                </bean>
#
#                <bean id="brokerMetricsService" class="eu.entsoe.ecp.activemq.service.BrokerMetricsService">
#                    <property name="localKeyStoreUtils" ref="localKeyStoreUtils"/>
#                </bean>
#
#                <bean id="brokerStartupShutdownListener" class="eu.entsoe.ecp.activemq.service.BrokerStartupShutdownListener">
#                    <property name="brokerCode" value="${ecp.broker.code:-}"/>
#                </bean>
#
#                <!-- Use annotation config to be able to use filter below -->
#                <bean id="ecpBrokerFilter" class="eu.entsoe.ecp.activemq.filter.AnnotationDrivenEcpBrokerFilter"/>
#            </beans>

# See ECP Kubernetes Guide, Shared Folder Configuration – Custom Volume Mounts
#      volumeClaimTemplates:
#        - metadata:
#            name: cd # volume name
#          spec:
#            accessModes: [ "ReadWriteMany" ] # storage of type ReadWriteMany
#            storageClassName: nfs-storage # name of storage class - needs to be provided by Kubernetes administrator
#            resources:
#              requests:
#                storage: 512Mi # request for storage size

# global config
global: # global config
  storage: # storage section
    class: standard # storage class – needs to be provided by Kubernetes cluster administrator
  imagePullSecrets: # secrets which hold information about login to docker repository
    - name: regcred # name of secret – name is defined by Kubernetes cluster administrator
