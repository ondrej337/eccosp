# The commented parameters have default values but these defaults can be overridden when enabled

#ecp-endpoint: # type of ECP component. Can be ecp-endpoint, ecp-directory, ecp-broker
#  enabled: true # boolean flag which defines whether the component will be deployed or not
  
instance: # array of ECP endpoint instances - one values file can hold multiple instances
  - name: ep1oooookkkkkk # name of kubernetes instance
    image: # section for information about Docker image
      name: ondrej337/eccosp # URL to docker image.
      tag: ecp-endpoint-4.15.0.2128 # Docker image tag - version or 'latest'
    replicaCount: 1 # number of replicas - ECP cluster
    resourcesK8s: # section for CPU and memory specification
      requests: # minimum guaranteed amount of a resource that is reserved for a container
        cpu: 500m # minimum CPU - one CPU = 1000m or 1
        ephemeralStorage: 256Mi # minimum ephemeral storage for application
        memory: 1Gi # minimum memory for container - 1Gi is equal to 1024 Mi
      limits: # maximum amount of a resource to be used by a container. Should be always higher than application can allocate (xmx)
        cpu: 1000m # maximum CPU - two CPUs = 2000m or 2
        memory: 1512Mi # maximum memory for container
    storageData: 1Gi # Storage for embedded database and certificates. If external DB is used, the value can be lower.
    storageLogs: 256Mi # storage for logs
    keepLogsAfterRestart: true # boolean flag - indicates if ECP logs are persisted after pod restart, default value false
    livenessProbe: false # automatic restart if pod is not in health state, default value false
    readinessProbe: true # ECP pod will not started before readiness probe is fulfilled - check of availability of external DB

    service: # section for definition of services exposed within kubernetes environment
      https: # protocol used for accessing GUI - can be http or https
        port: 8443 # port used for exposing HTTP(S) service
    ingress: # an object that allows access to Kubernetes services from outside the Kubernetes cluster.
      enabled: false # boolean flag for enable/disable ingress, default value false
    ecpProperties: # stands for ecp.properties file
      springProfilesActive: ecp-nonha #stands for parameter spring.profiles.active
      dataDirectory: /var/lib/ecp-endpoint # dataDirectory config parameter for storage of persistent data
      ecpKeystoreLocation: /var/lib/ecp-endpoint/keystore.jks # ecp.keystore.location
      ecpKeystorePassword: password # password for the keystore.jks # ecp.keystore.password
      ecpAuthKeystoreLocation: /var/lib/ecp-endpoint/authKeystore.jks #  ecp.authKeystore.location
      ecpAuthKeystorePassword: password # ecp.authKeystore.password


      internalBrokerHost: eccosp-eccosp-artemis-artemis-eptb1-svc # internalBroker.amqp.host
      internalBrokerAmqpPort: 5672 # internalBroker.amqp.port
      internalBrokerUseAuthentication: true # internalBroker.useAuthentication
      internalBrokerAuthUser: endpoint # internalBroker.auth.user
      internalBrokerAuthPassword: password # internalBroker.auth.password
      internalBrokerKeystoreLocation: ${dataDirectory}/authKeystore.jks # internalBroker.keystore.location
      internalBrokerKeystorePassword: password # internalBroker.keystore.password
      internalBrokerKeystoreAuthAlias: ecp_module_auth # internalBroker.keystore.authAlias
      internalBrokerUrls: amqps://eccosp-eccosp-artemis-artemis-eptb1-svc:5672 # internalBroker.urls

      loggingFileName: /var/log/ecp-endpoint/ecp.log # logging.file.name
      loggingFilePath: /var/log/ecp-endpoint # logging.file.path
      loggingConfig: /etc/ecp-endpoint/ecp-logback.xml # logging.config
      loggingLevelOrgApacheQpid: WARN # logging.level.org.apache.qpid


      springJmxEnabled: false # spring.jmx.enabled
      serverErrorWhiteLabelEnabled: false # server.error.whitelabel.enabled

      ecpDBKeystorePassword: password # ecp.db.keystore.password

      ecpEndpointAmqpApiEnabled: true # ecp.endpoint.amqpApiEnabled
      ecpEndpointAmqpApiSendHandlerEnabled: true # enable AMQP API Send Handler
      sendHandlerBeanName: amqpApiSendHandler # ecp.endpoint.sendHandler[0].beanName
      sendHandlertypeName: "*" # ecp.endpoint.sendHandler[0].typeName

      ecpCsrfSecret: P9CkNis9r5Pn00RFZwN9oZgi # ecp.csrf.secret

    envConf: # stands for env.conf file
      resourcesJvm: # memory allocation for ECP component
        xms: 128M # lower bound of java heap memory size
        xmx: 1G # upper bound of java heap memory size

    ecpUsersProperties: # stands for ecp-users.properties
      ecpEndpointUsers: # array of users
        - login: admin # ecp.endpoint.users[0].login
          password: password # ecp.endpoint.users[0].password
          role: admin # ecp.endpoint.users[0].role
        - login: tester # ecp.endpoint.users[1].login
          password: passwordtester # ecp.endpoint.users[1].password
          role: user # ecp.endpoint.users[1].login


    volumeMounts: # volume mounts - can be used for mapping config files or storages
      - name: config # name of volume mounts for config
        subPath: bootstrap.xml # name of configuration file
        mountPath: /etc/ecp-endpoint/jms/ssl-jks/bootstrap.xml # path where config file will be mounted

    configMap: # config maps array
      - subPath: bootstrap.xml # name of config file/volume mount
        content: |- # content is shifted by two spaces
         <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
         <!--
           ~ Licensed to the Apache Software Foundation (ASF) under one or more
           ~ contributor license agreements. See the NOTICE file distributed with
           ~ this work for additional information regarding copyright ownership.
           ~ The ASF licenses this file to You under the Apache License, Version 2.0
           ~ (the "License"); you may not use this file except in compliance with
           ~ the License. You may obtain a copy of the License at
           ~
           ~     http://www.apache.org/licenses/LICENSE-2.0
           ~
           ~ Unless required by applicable law or agreed to in writing, software
           ~ distributed under the License is distributed on an "AS IS" BASIS,
           ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           ~ See the License for the specific language governing permissions and
           ~ limitations under the License.
           -->

         <broker xmlns="http://activemq.apache.org/schema">

            <jaas-security domain="activemq"/>

            <!-- artemis.URI.instance is parsed from artemis.instance by the CLI startup.
                 This is to avoid situations where you could have spaces or special characters on this URI -->
            <server configuration="file:/opt/eccosp-artemis/etc/broker.xml"/>

            <!-- The web server is only bound to localhost by default -->
            <web path="web" rootRedirectLocation="console">
                <binding name="artemis" uri="http://localhost:8161">
                    <app name="branding" url="activemq-branding" war="activemq-branding.war"/>
                    <app name="plugin" url="artemis-plugin" war="artemis-plugin.war"/>
                    <app name="console" url="console" war="console.war"/>
                    <app url="metrics" war="metrics.war"/>
                </binding>
            </web>
         </broker>


# global config
global: # global config
  storage: # storage section
    class: longhorn # storage class – needs to be provided by Kubernetes cluster administrator
  imagePullSecrets: # secrets which hold information about login to docker repository
    - name: regcred # name of secret – name is defined by Kubernetes cluster administrator